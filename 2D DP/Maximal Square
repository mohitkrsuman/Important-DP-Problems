Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

class Solution {
public: 
    int solve(vector<vector<char>> &matrix, int i, int j, int &maxi, vector<vector<int>> &dp){
        if(i >= matrix.size() || j >= matrix[0].size()){
            return 0;
        }
        
        // maximum size of square that we can make from i and j
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        int right = solve(matrix, i, j+1, maxi, dp);
        int down = solve(matrix, i+1, j, maxi, dp);
        int diagonal = solve(matrix, i+1, j+1, maxi, dp);
        
        if(matrix[i][j] == '1'){
            int ans = 1 + min(right, min(down, diagonal));
            maxi = max(maxi, ans);
            return dp[i][j] = ans;
        }else{
            return dp[i][j] = 0;
        }
    }
    
    // bottom up approach
    int solveDP(vector<vector<char>> &matrix){
         int n = matrix.size(), m = matrix[0].size();
         vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        
         int maxi = 0;
         for(int i = n-1; i >= 0; i--){
             for(int j = m-1; j >= 0; j--){
                 int right = dp[i][j+1];
                 int diagonal = dp[i+1][j+1];
                 int down = dp[i+1][j];
                 
                 if(matrix[i][j] == '1'){
                     dp[i][j] = 1 + min(right, min(diagonal, down));
                     maxi = max(maxi, dp[i][j]);
                 }else{
                     dp[i][j] = 0;
                 }
             }
         }     
        return maxi * maxi;
    }

    
    // space optimization
    int solveSpace(vector<vector<char>> &matrix){
        int n = matrix.size(), m = matrix[0].size();
        vector<int> curr(m+1, 0);
        vector<int> next(m+1, 0);
        int maxi = 0;
        
        // i -> currrow, i+1 -> nextRow
        
        for(int i = n-1; i >= 0; i--){
            for(int j = m-1; j >= 0; j--){
                int right = curr[j+1];
                int diagonal = next[j+1];
                int down = next[j];
                
                if(matrix[i][j] == '1'){
                    curr[j] = 1 + min(right, min(diagonal, down));
                    maxi = max(maxi, curr[j]);
                }else{
                    curr[j] = 0;
                }
            }
            next = curr;
        }
        
        return maxi * maxi;
    }
    
    int maximalSquare(vector<vector<char>>& matrix) {
        int maxi = 0;
        int n = matrix.size(), m = matrix[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        solve(matrix, 0, 0, maxi, dp);
        return maxi*maxi;
        // return solveDP(matrix);
        // return solveSpace(matrix);
    }
};
