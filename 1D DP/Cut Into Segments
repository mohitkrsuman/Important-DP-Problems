
#include<limits.h>
int solveRec(int n, int x, int y, int z){
    if(n == 0) return 0;
    
    if(n < 0) return INT_MIN;
    
    int ans1 = solveRec(n-x, x, y, z) + 1;
    int ans2 = solveRec(n-y, x, y, z) + 1;
    int ans3 = solveRec(n-z, x, y, z) + 1;
   
    int ans =  max(ans1, max(ans2, ans3));
    return ans;
}

int solveDP(int n, int x, int y, int z, vector<int> &dp){
    if(n == 0) return 0;
    if(n < 0) return INT_MIN;
    if(dp[n] != -1){
        return dp[n];
    }
    
    int ans1 = solveDP(n-x, x, y, z, dp) + 1;
    int ans2 = solveDP(n-y, x, y, z, dp) + 1;
    int ans3 = solveDP(n-z, x, y, z, dp) + 1;
    dp[n] = max(ans1, max(ans2, ans3));
    
    return dp[n];
}

int solveTab(int n, int x, int y, int z){
    vector<int> dp(n+1, -1);
    dp[0] = 0;
    
    for(int i = 1; i <= n; i++){
       if(i-x >= 0 && dp[i-x] != -1) {
           dp[i] = max(dp[i], dp[i-x] + 1);
       }
       if(i-y >= 0 && dp[i-y] != -1) {
           dp[i] = max(dp[i], dp[i-y] + 1);
       }
       if(i-z >= 0 && dp[i-z] != -1) {
           dp[i] = max(dp[i], dp[i-z] + 1);
       }
    }
    int ans = dp[n];
    if(ans < 0){
        return 0;
    }
    return ans;
}


int cutSegments(int n, int x, int y, int z) {
	// Write your code here.
//     int ans = solveRec(n, x, y, z);
//     if(ans < 0){
//         return 0;
//     }
//     return ans;
    
//     vector<int> dp(n+1, -1);
//     int ans = solveDP(n, x, y, z, dp);
//     if(ans < 0) return 0;
//     return ans;
    
    return solveTab(n, x, y, z);
}
