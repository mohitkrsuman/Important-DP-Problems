You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.

Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.

Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.


class Solution {
public:
    int dp[21][21];
    int solve(int i, int j, vector<int> &nums){
        if(i == j){
            return nums[i];
        }
        if(i > j) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        // assume worst when things happen to you
        // do best when you do the thing
        
        int choice1 = nums[i] + min(solve(i+2, j, nums), solve(i+1, j-1, nums));
        int choice2 = nums[j] + min(solve(i+1, j-1, nums), solve(i, j-2, nums));
        
        return dp[i][j] = max(choice1, choice2);
        
        
    }
    
    bool predictTheWinner(vector<int>& nums) {
        int n = nums.size();
        memset(dp, -1, sizeof(dp));
        int sum = accumulate(nums.begin(), nums.end(), 0);
        
        int val = solve(0, n-1, nums);
        
        int diff = sum - val;
        if(diff > val){
            return false;
        }
        
        return true;
    }
};

/*
    min  ((i+2,j) (i+1, j-1))   opponent will give you min of this to maximise its score
          \      /
          i+1   j    i     j-1   opponent selected
           \   /      \   /
           (i+1--j)  (i--j-1)    you gave this to opponent, nowopponent will choose from this 
               \     /
             i ------ j          you choose
             
             if(we choose i then opponent will give minimum of (i+2, j) and (i+1, j-1))
             if(we choose j, then opponent will give minimum of (i+1, j-1), (i, j-2))
             i == start
             j == end
*/



