Given an integer array nums, return the length of the longest strictly increasing subsequence.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

class Solution {
    int solve(int idx, int prev_idx, vector<int>&nums, int n, vector<vector<int>> &dp){
        if(idx == n) return 0;
        
        if(dp[idx][prev_idx+1] != -1) return dp[idx][prev_idx+1];
        
        int len = 0 + solve(idx+1, prev_idx, nums, n, dp);
        
        if(prev_idx == -1 || nums[idx] > nums[prev_idx]){
            len = max(len, 1 + solve(idx+1, idx, nums, n, dp));
        }
        
        return dp[idx][prev_idx+1] = len;
    }
    
    int solveTab(vector<int> &nums){
        int n = nums.size();
        vector<vector<int>>dp(n+1, vector<int>(n+1, 0));
        
        for(int idx = n-1; idx >= 0; idx--){
            for(int prev_idx = idx-1; prev_idx >= -1; prev_idx--){
                int len = 0 + dp[idx+1][prev_idx+1]; // prev_idx+1 to get 0 based index 
                
                if(prev_idx == -1 || nums[idx] > nums[prev_idx]){
                    len = max(len, 1 + dp[idx+1][idx+1]);
                }
                dp[idx][prev_idx+1] = len;
            }
        }
        
        return dp[0][-1+1];
    }
    
    int solveSpace(vector<int> &nums){
        int n = nums.size();
        vector<int> next(n+1, 0), curr(n+1, 0);
        
        for(int idx = n-1; idx >= 0; idx--){
            for(int prev_idx = idx-1; prev_idx >= -1; prev_idx--){
                int len = 0 + next[prev_idx+1];
                
                if(prev_idx == -1 || nums[idx] > nums[prev_idx]){
                    len = max(len, 1 + next[idx+1]);
                }
                curr[prev_idx+1] = len;
            }
            next = curr;
        }
        return next[0];
    }
    
    int lisLength(vector<int> &nums){
        int n = nums.size();
        vector<int> dp(n, 1);
        int maxi = 1;
        
        for(int idx = 0; idx < n; idx++){
            for(int prev_idx = 0; prev_idx < idx; prev_idx++){
                if(nums[prev_idx] < nums[idx]){
                    dp[idx] = max(dp[idx], 1 + dp[prev_idx]);
                }
            }
            maxi = max(maxi, dp[idx]);
        }
        
        return maxi;
    }
    
    // solve optimal (Using Binary Searc)
    int lisHelp(vector<int> &nums){
        int n = nums.size();
        vector<int> ans;
        ans.push_back(nums[0]);
        
        for(int i = 1; i < n; i++){
            if(nums[i] > ans.back()){
                ans.push_back(nums[i]);
            }else{
                // find index of just bigger element
                int idx = lower_bound(ans.begin(), ans.end(), nums[i]) - ans.begin();
                ans[idx] = nums[i];
            }
        }
        
        return ans.size();
    }
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n+1, -1));
        // return solve(0, -1, nums, n, dp);
        // return solveTab(nums);
        // return solveSpace(nums);
        // return lisLength(nums);
        return lisHelp(nums);
    }
};
