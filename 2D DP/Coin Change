class Solution {
    int solveMemo(vector<int> &coins, int idx, int target, vector<vector<int>> &dp){
        if(idx == 0){
            if(target % coins[idx] == 0){
                return target/coins[idx];
            }
            return 1e8;
        }
        
        if(dp[idx][target] != -1) return dp[idx][target];
        
        int take = 1e8;
        if(coins[idx] <= target){
            take = 1 + solveMemo(coins, idx, target - coins[idx], dp);
        }
        int notTake = 0 + solveMemo(coins, idx-1, target, dp);
        
        return dp[idx][target] = min(take, notTake);
    }
    
    int solveTab(vector<int> &coins, int amount){
       int n = coins.size();
        
        vector<vector<int>> dp(n , vector<int>(amount+1 , 0));
        
        for(int j = 1 ;j <= amount ; j++){
            if(j % coins[0] ==  0){
                dp[0][j] = j/coins[0];
            }
            else dp[0][j] = 1e5;
        }

        for(int idx = 1;idx < n; idx++){
            for(int j = 1; j <= amount ; j++){
                int nottake = dp[idx-1][j];
                
                int take = 1e5;
                if(coins[idx] <= j)
                    take = 1 + dp[idx][j-coins[idx]];
                
                dp[idx][j] = min(take , nottake);
            }
        }
        
        return dp[n-1][amount];
    }
    
    int solveSpace(vector<int> &coins, int amount){
         int n = coins.size();
        vector<int> prev(amount+1, 0), curr(amount+1, 0);
        
        for(int j = 1 ;j <= amount ; j++){
            if(j % coins[0] ==  0){
                prev[j] = j/coins[0];
            }
            else prev[j] = 1e5;
        }

        for(int idx = 1;idx < n; idx++){
            for(int j = 0; j <= amount ; j++){
                int nottake = prev[j];
                
                int take = 1e5;
                if(coins[idx] <= j)
                    // as we are staying at same idx
                    take = 1 + curr[j-coins[idx]];
                
                curr[j] = min(take , nottake);
            }
            prev = curr;
        }
        
        return prev[amount];
    }
public:
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(amount+1, -1));
        // int ans = solveMemo(coins, n-1, amount, dp);
        int ans = solveTab(coins, amount);
        //  int ans = solveSpace(coins, amount);
        if(ans >= 1e5){
            return -1;
        }
        return ans;
    }
};
